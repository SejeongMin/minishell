!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
add_env	cd.c	/^void	add_env(t_env *env, char *key, char *value)$/;"	f
change_env	cd.c	/^void	change_env(t_env *env, char *key, char *value)$/;"	f
check_cmd	check_cmd.c	/^int	check_cmd(t_data *data)$/;"	f
child	pipe.c	/^void	child(t_m_list *list, t_env *env)$/;"	f
cmd_cnt	redirection.c	/^int	cmd_cnt(t_cmd *cmd)$/;"	f
cmdline_change	parsing_cmd.c	/^char *cmdline_change(char *cmdline, t_env *env)$/;"	f
create_child	pipe.c	/^void	create_child(t_m_list *list, t_env *env)$/;"	f
delete_env	unset.c	/^void	delete_env(t_env **env, char *key)$/;"	f
dollar_sign	parsing_cmd.c	/^char	*dollar_sign(char *cmdline, t_env *env)$/;"	f
double_quote	parsing_cmd.c	/^char	*double_quote(char *cmdline, t_env *env)$/;"	f
env_num	env.c	/^int	env_num(t_env *env)$/;"	f
error_msg	error.c	/^void	error_msg(char *str)$/;"	f
exec_extern	execute.c	/^void	exec_extern(t_cmd *cmd, char **env)$/;"	f
execute	execute.c	/^void	execute(t_m_list *list, t_env *env)$/;"	f
execute_cmd	execute.c	/^void	execute_cmd(t_cmd *cmd, t_env *env)$/;"	f
execute_extern	execute.c	/^void	execute_extern(t_cmd *cmd, char **env)$/;"	f
execute_list	execute.c	/^void	execute_list(t_m_list *list, t_env *env, int b_stdin, int b_stdout)$/;"	f
find_env	cd.c	/^t_env	*find_env(char *key, t_env *env)$/;"	f
find_rd_type	redirection.c	/^int	find_rd_type(char *rd)$/;"	f
free_cmd_data	free_list.c	/^void	free_cmd_data(t_cmd *content)$/;"	f
free_cmd_list	free_list.c	/^void	free_cmd_list(t_data *data)$/;"	f
free_cmdline	redirection.c	/^void	free_cmdline(char **cmdline)$/;"	f
free_env	unset.c	/^void	free_env(t_env **cur)$/;"	f
free_env_list	free_list.c	/^void	free_env_list(t_data *data)$/;"	f
free_envp	free_list.c	/^void	free_envp(char **env)$/;"	f
ft_cd	cd.c	/^void	ft_cd(t_cmd *cmd, t_env *env)$/;"	f
ft_chdir	cd.c	/^void	ft_chdir(char *dest, t_env *env)$/;"	f
ft_exit	exit.c	/^void	ft_exit(t_cmd *cmd)$/;"	f
ft_export	export.c	/^void	ft_export(t_cmd *cmd, t_env *env)$/;"	f
ft_strcmp	unset.c	/^int	ft_strcmp(const char *s1, const char *s2)$/;"	f
ft_strjoin_free	util.c	/^char *ft_strjoin_free(char *s1, char *s2)$/;"	f
ft_unset	unset.c	/^void	ft_unset(t_cmd *cmd, t_env *env)$/;"	f
get_envlen	env.c	/^int	get_envlen(char **env)$/;"	f
get_keylen	env_util.c	/^int	get_keylen(char *str)$/;"	f
heredoc	redirection.c	/^void	heredoc(char *end)$/;"	f
init_env	env.c	/^t_env	*init_env(char **envp)$/;"	f
init_struct	init_shell.c	/^void	init_struct(t_data *data, char **envp)$/;"	f
is_numeric	exit.c	/^int	is_numeric(char *str)$/;"	f
key_len	parsing_cmd.c	/^int	key_len(char *str)$/;"	f
make_envp	env.c	/^char	**make_envp(t_env *env)$/;"	f
mixed_quote	parsing_cmd.c	/^char	*mixed_quote(char *cmdline, t_env *env)$/;"	f
new_env	env.c	/^t_env	*new_env(char *envline)$/;"	f
parsing	parsing_cmd.c	/^void	parsing(t_data *data)$/;"	f
parsing_proc	parsing_cmd.c	/^void	parsing_proc(t_data *data, char *tmp)$/;"	f
print_export	export.c	/^void	print_export(t_env *env)$/;"	f
put_in_cmd	parsing_cmd.c	/^void	put_in_cmd(t_data *data, char *cmd, char let)$/;"	f
putin	parsing_util.c	/^void 	putin(char *cmd, char *cmdline, int from, int i)$/;"	f
quote_error	check_cmd.c	/^int	quote_error(char *str)$/;"	f
quote_split	parsing_util.c	/^char	**quote_split(char *cmd, char c)$/;"	f
rd_double_out	redirection.c	/^int	rd_double_out(char *file)$/;"	f
rd_handler	redirection.c	/^int	rd_handler(t_cmd *cmd)$/;"	f
rd_in	redirection.c	/^int	rd_in(char *file)$/;"	f
rd_out	redirection.c	/^int	rd_out(char *file)$/;"	f
redirection	redirection.c	/^int	redirection(char *file, int type)$/;"	f
reparsing_env	parsing_cmd.c	/^void	reparsing_env(t_data *data)$/;"	f
replace_dollar	env_util.c	/^char	*replace_dollar(char *str, t_env *env)$/;"	f
sep_cmdline	parsing_util.c	/^void	sep_cmdline(char *cmd, char c, char **cmdline)$/;"	f
sep_cnt_quote	parsing_util.c	/^int	sep_cnt_quote(char *cmd, char c)$/;"	f
setting_signal	init_shell.c	/^void	setting_signal(void)$/;"	f
show_prompt	prompt.c	/^void	show_prompt(t_data *data)$/;"	f
sig_handler	init_shell.c	/^void	sig_handler(int signal)$/;"	f
single_quote	parsing_cmd.c	/^char	*single_quote(char *cmdline)$/;"	f
two_time_error	check_cmd.c	/^int	two_time_error(char *str)$/;"	f
